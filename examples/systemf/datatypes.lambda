{-- Boolean Definitions --}
true  = Λ X . λ x : X . λ y : X . x
false = Λ X . λ x : X . λ y : X . y
Bool :: ∀ X . X -> X -> X
not = λ b : ∀ X . X -> X -> X . (b [Bool]) false true
and = λ a : Bool . λ b : Bool . (a [Bool]) b false
or = λ a : Bool . λ b : Bool . (a [Bool]) true b
impl  = λ a : Bool . λ b : Bool . or (not a) b
equiv = λ a : Bool . λ b : Bool . and (impl a b) (impl b a)
if = Λ X . λ b : Bool . λ t : X . λ f : X . b [X] t f
eqB ≐ λ x : Bool . λ y : Bool . equiv x y
{-- End Boolean Definitions --}

{-- Naturals Definitions --}
Nat :: ∀ X . X -> (X -> X) -> X
cero    = Λ X . λ z : X . λ s : X -> X . z
uno     = Λ X . λ z : X . λ s : X -> X . s z
dos     = Λ X . λ z : X . λ s : X -> X . s (s z)
tres    = Λ X . λ z : X . λ s : X -> X . s (s (s z))
cuatro  = Λ X . λ z : X . λ s : X -> X . s (s (s (s z)))
cinco   = Λ X . λ z : X . λ s : X -> X . s (s (s (s (s z))))
seis    = Λ X . λ z : X . λ s : X -> X . s (s (s (s (s (s z)))))
siete   = Λ X . λ z : X . λ s : X -> X . s (s (s (s (s (s (s z))))))
ocho    = Λ X . λ z : X . λ s : X -> X . s (s (s (s (s (s (s (s z)))))))
nueve   = Λ X . λ z : X . λ s : X -> X . s (s (s (s (s (s (s (s (s z))))))))
diez    = Λ X . λ z : X . λ s : X -> X . s (s (s (s (s (s (s (s (s (s z)))))))))
{-- End Naturals Definitions --}

{-- Pairs --}
-- Definition
Pair :: forall U . forall V . forall X . (U -> V -> X) -> X
pair = Lambda U . Lambda V . lambda u : U . lambda v : V . Lambda X . lambda f : U -> V -> X . ((f u) v)

-- Examples
:e pair [Nat] [Nat] uno dos

nil  = Λ X . (Λ R . λ c : X -> R -> R . λ n : R . n)
cons = Λ X . λ h : X . λ t : ∀ R . (X -> R -> R) -> R -> R . (Λ R . λ c : X -> R -> R . λ n : R . c h (t [R] c n))

:e cons [Nat] uno (cons [Nat] dos (nil [Nat]))
